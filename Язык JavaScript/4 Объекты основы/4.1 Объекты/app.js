let user = new Object(); // синтаксис "конструктор объекта"
let user2 = {};// синтаксис "литерал объекта"

let user3 = {
  name: "John",
  age:30
};

alert(user.name);
alert(user.age)

/////////////////////////////////////////////////////////////////////

user.isAdmin = true;

//////////////////////////////////////////////////////////////////////

delete user.age;

//////////////////////////////////////////////////////////////////////

let user = {
  name: "John",
  age: 30,
  "likes birds": true  // имя свойства из нескольких слов должно быть в кавычках
};
let user = {
  name:"John",
  age:30,
}

//////////////////////////////////////////////////////////////////////

const user = {
  name: "John"
};

user.name = "Pete"; // (*)

alert(user.name); // Pete

//////////////////////////////////////////////////////////////////////

// это вызовет синтаксическую ошибку
user.likes birds = true

let user = {};

//////////////////////////////////////////////////////////////////////

// присваивание значения свойству
user["likes birds"] = true;

//////////////////////////////////////////////////////////////////////

// получение значения свойства
alert(user["likes birds"]); // true

//////////////////////////////////////////////////////////////////////

// удаление свойства
delete user["likes birds"];

let key = "likes birds";

// то же самое, что и user["likes birds"] = true;
user[key] = true;

//////////////////////////////////////////////////////////////////////

let user = {
  name: "John",
  age: 30
};

let key = prompt("Что вы хотите узнать о пользователе?", "name");

// доступ к свойству через переменную
alert( user[key] ); // John (если ввели "name")

//////////////////////////////////////////////////////////////////////

let user = {
  name: "John",
  age: 30
};

let key = "name";
alert( user.key ); // undefined

//////////////////////////////////////////////////////////////////////

let fruit = prompt("Какой фрукт купить?", "apple");

let bag = {
  [fruit]: 5, // имя свойства будет взято из переменной fruit
};

alert( bag.apple ); // 5, если fruit="apple"

//////////////////////////////////////////////////////////////////////

let fruit = prompt("Какой фрукт купить?", "apple");
let bag = {};

// имя свойства будет взято из переменной fruit
bag[fruit] = 5;

//////////////////////////////////////////////////////////////////////

let fruit = 'apple';
let bag = {
  [fruit + 'Computers']: 5 // bag.appleComputers = 5
};

//////////////////////////////////////////////////////////////////////

function makeUser(name, age) {
  return {
    name: name,
    age: age
    // ...другие свойства
  };
}

let user = makeUser("John", 30);
alert(user.name); // John

//////////////////////////////////////////////////////////////////////

function makeUser(name, age) {
  return {
    name, // то же самое, что и name: name
    age   // то же самое, что и age: age
    // ...
  };
}

//////////////////////////////////////////////////////////////////////

let user = {
  name,  // тоже самое, что и name:name
  age: 30
};

//////////////////////////////////////////////////////////////////////

// эти имена свойств допустимы
let obj = {
  for: 1,
  let: 2,
  return: 3
};

alert( obj.for + obj.let + obj.return );  // 6

//////////////////////////////////////////////////////////////////////

let obj = {
  0: "Тест" // то же самое что и "0": "Тест"
};

// обе функции alert выведут одно и то же свойство (число 0 преобразуется в строку "0")
alert( obj["0"] ); // Тест
alert( obj[0] ); // Тест (то же свойство)

//////////////////////////////////////////////////////////////////////

let obj = {};
obj.__proto__ = 5; // присвоим число
alert(obj.__proto__); // [object Object], значение - это объект, т.е. не то, что мы ожидали

//////////////////////////////////////////////////////////////////////

let user = {};

alert( user.noSuchProperty === undefined ); // true означает "свойства нет

//////////////////////////////////////////////////////////////////////

"key" in object

//////////////////////////////////////////////////////////////////////

let user = { name: "John", age: 30 };

alert( "age" in user ); // true, user.age существует
alert( "blabla" in user ); // false, user.blabla не существует

//////////////////////////////////////////////////////////////////////

let user = { age: 30 };

let key = "age";
alert( key in user ); // true, имя свойства было взято из переменной key

//////////////////////////////////////////////////////////////////////

let obj = {
  test: undefined
};

alert( obj.test ); //  выведет undefined, значит свойство не существует?
alert( "test" in obj ); // true, свойство существует!

//////////////////////////////////////////////////////////////////////

for (key in object) {
  // тело цикла выполняется для каждого свойства объекта
}

//////////////////////////////////////////////////////////////////////

let user = {
  name: "John",
  age: 30,
  isAdmin: true
};

//////////////////////////////////////////////////////////////////////

let user = {
  name: "John",
  age: 30,
  isAdmin: true
};

for (let key in user) {
  // ключи
  alert( key );  // name, age, isAdmin
  // значения ключей
  alert( user[key] ); // John, 30, true
}

//////////////////////////////////////////////////////////////////////

let codes = {
  "49": "Германия",
  "41": "Швейцария",
  "44": "Великобритания",
  // ..,
  "1": "США"
};

for (let code in codes) {
  alert(code); // 1, 41, 44, 49
}

//////////////////////////////////////////////////////////////////////

// Math.trunc - встроенная функция, которая удаляет десятичную часть
alert( String(Math.trunc(Number("49"))) ); // "49", то же самое ⇒ свойство целочисленное
alert( String(Math.trunc(Number("+49"))) ); // "49", не то же самое, что "+49" ⇒ свойство не целочисленное
alert( String(Math.trunc(Number("1.2"))) ); // "1", не то же самое, что "1.2" ⇒ свойство не целочисленное

//////////////////////////////////////////////////////////////////////

let user = {
  name: "John",
  surname: "Smith"
};
user.age = 25; // добавим ещё одно свойство

// не целочисленные свойства перечислены в порядке создания
for (let prop in user) {
  alert( prop ); // name, surname, age
}

//////////////////////////////////////////////////////////////////////

let codes = {
  "+49": "Германия",
  "+41": "Швейцария",
  "+44": "Великобритания",
  // ..,
  "+1": "США"
};

for (let code in codes) {
  alert( +code ); // 49, 41, 44, 1
}

//////////////////////////////////////////////////////////////////////

let user = {};
user.name = "John";
user.surname  = "Smith";
user.name = "Pete";
delete user.name;

function isEmpty(obj){
  let i;
  for(let key in obj)
  {
    if(obj(key) != undefined)
    i++
  }
  if (i!=0){
    return false;
  }
}

const user = {
  name: "John"
};

// Работает!
user.name = "Pete";

// Ошибка
user = 123;


let salaries = {
  John: 100,
  Ann: 160,
  Pete: 130
}
let sum = 0;
function calcSum(obj) {

  for (let key in obj) {
      sum += obj[key];
    }
  return sum;
}
let menu = {
  width: 200,
  height: 300,
  title: "My menu"
};

function multiplyNumeric(obj){
for (let key in obj) {
  if (typeof obj[key] == 'number') {
      obj[key] *= 2;
    }
}

}

alert( multiplyNumeric(menu)); // 390