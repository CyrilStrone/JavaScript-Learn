/////////////////////////////////////////////////////////////////////

// Объект пользователя
let user = {
    name: "Dzhon",
    age: 30
};

/////////////////////////////////////////////////////////////////////
user.sayHi = function() {
    alert("Привет!");
  };
user.sayHi(); // Привет!
/////////////////////////////////////////////////////////////////////
let user = {
  // ...
};

// сначала объявляем
function sayHi() {
  alert("Привет!");
}

// затем добавляем в качестве метода
user.sayHi = sayHi;

/////////////////////////////////////////////////////////////////////
// эти объекты делают одно и то же (одинаковые методы)

user = {
  sayHi: function() {
    alert("Привет");
  }
};

// сокращённая запись выглядит лучше, не так ли?
user = {
  sayHi() { // то же самое, что и "sayHi: function()"
    alert("Привет");
  }
};
/////////////////////////////////////////////////////////////////////
let user = {
  name: "Джон",
  age: 30,

  sayHi() {
    // this - это "текущий объект"
    alert(this.name);
  }

};

user.sayHi(); // Джон
/////////////////////////////////////////////////////////////////////
let user = {
    name: "Джон",
    age: 30,
  
    sayHi() {
      alert(user.name); // используем переменную "user" вместо ключевого слова "this"
    }
  
  };
/////////////////////////////////////////////////////////////////////
let user = {
    name: "Джон",
    age: 30,
  
    sayHi() {
      alert( user.name ); // приведёт к ошибке
    }
  
  };
  
  
  let admin = user;
  user = null; // обнулим переменную для наглядности, теперь она не хранит ссылку на объект.
  
  admin.sayHi(); // Ошибка! Внутри sayHi() используется user, которая больше не ссылается на объект!
  /////////////////////////////////////////////////////////////////////

  function sayHi() {
    alert( this.name );
  }

  /////////////////////////////////////////////////////////////////////

let user = { name: "Джон" };
let admin = { name: "Админ" };

function sayHi() {
  alert( this.name );
}

// используем одну и ту же функцию в двух объектах
user.f = sayHi;
admin.f = sayHi;

// вызовы функции, приведённые ниже, имеют разное значение this
// "this" внутри функции является ссылкой на объект, который указан "перед точкой"
user.f(); // Джон  (this == user)
admin.f(); // Админ  (this == admin)

admin['f'](); // Админ (неважен способ доступа к методу - через точку или квадратные скобки)

  /////////////////////////////////////////////////////////////////////

function sayHi() {
  alert(this);
}

sayHi(); // undefined

  /////////////////////////////////////////////////////////////////////

let calculator = {
  sum() {
    return this.a + this.b;
  },

  mul() {
    return this.a * this.b;
  },

  read() {
    this.a = +prompt('a?', 0);
    this.b = +prompt('b?', 0);
  }
};

calculator.read();
alert( calculator.sum() );
alert( calculator.mul() );

  /////////////////////////////////////////////////////////////////////



  /////////////////////////////////////////////////////////////////////