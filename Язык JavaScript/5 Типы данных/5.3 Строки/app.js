//////////////////////////////////////////////////////////////////////

let single = 'single-quoted';
let double = "double-quoted";

let backticks = `backticks`;

//////////////////////////////////////////////////////////////////////

function sum(a, b) {
  return a + b;
}

alert(`1 + 2 = ${sum(1, 2)}.`); // 1 + 2 = 3.

//////////////////////////////////////////////////////////////////////

let guestList = `Guests:
 * John
 * Pete
 * Mary
`;

alert(guestList); // —Å–ø–∏—Å–æ–∫ –≥–æ—Å—Ç–µ–π, —Å–æ—Å—Ç–æ—è—â–∏–π –∏–∑ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö —Å—Ç—Ä–æ–∫

//////////////////////////////////////////////////////////////////////

let guestList = "Guests: // Error: Unexpected token ILLEGAL
  * John";

//////////////////////////////////////////////////////////////////////

let guestList = "Guests:\n * John\n * Pete\n * Mary";

alert(guestList); // —Å–ø–∏—Å–æ–∫ –≥–æ—Å—Ç–µ–π, —Å–æ—Å—Ç–æ—è—â–∏–π –∏–∑ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö —Å—Ç—Ä–æ–∫

//////////////////////////////////////////////////////////////////////

// –ø–µ—Ä–µ–≤–æ–¥ —Å—Ç—Ä–æ–∫–∏ –¥–æ–±–∞–≤–ª–µ–Ω —Å –ø–æ–º–æ—â—å—é —Å–∏–º–≤–æ–ª–∞ –ø–µ—Ä–µ–≤–æ–¥–∞ —Å—Ç—Ä–æ–∫–∏
let str1 = "Hello\nWorld";

// –º–Ω–æ–≥–æ—Å—Ç—Ä–æ—á–Ω–∞—è —Å—Ç—Ä–æ–∫–∞, —Å–æ–∑–¥–∞–Ω–Ω–∞—è —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –æ–±—Ä–∞—Ç–Ω—ã—Ö –∫–∞–≤—ã—á–µ–∫
let str2 = `Hello
World`;

alert(str1 == str2); // true

//////////////////////////////////////////////////////////////////////

// ¬©
alert( "\u00A9" );

// –î–ª–∏–Ω–Ω—ã–µ —é–Ω–∏–∫–æ–¥–Ω—ã–µ –∫–æ–¥—ã
// ‰Ω´, —Ä–µ–¥–∫–∏–π –∫–∏—Ç–∞–π—Å–∫–∏–π –∏–µ—Ä–æ–≥–ª–∏—Ñ
alert( "\u{20331}" );
// üòç, –ª–∏—Ü–æ —Å —É–ª—ã–±–∫–æ–π –∏ –≥–ª–∞–∑–∞–º–∏ –≤ —Ñ–æ—Ä–º–µ —Å–µ—Ä–¥–µ—Ü
alert( "\u{1F60D}" );

//////////////////////////////////////////////////////////////////////

alert( 'I\'m the Walrus!' ); // I'm the Walrus!

//////////////////////////////////////////////////////////////////////

alert( `I'm the Walrus!` ); // I'm the Walrus!

//////////////////////////////////////////////////////////////////////

alert( `The backslash: \\` ); // The backslash: \

//////////////////////////////////////////////////////////////////////

alert( `My\n`.length ); // 3

//////////////////////////////////////////////////////////////////////

let str = `Hello`;

// –ø–æ–ª—É—á–∞–µ–º –ø–µ—Ä–≤—ã–π —Å–∏–º–≤–æ–ª
alert( str[0] ); // H
alert( str.charAt(0) ); // H

// –ø–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π —Å–∏–º–≤–æ–ª
alert( str[str.length - 1] ); // o

//////////////////////////////////////////////////////////////////////

let str = `Hello`;

alert( str[1000] ); // undefined
alert( str.charAt(1000) ); // '' (–ø—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞)

//////////////////////////////////////////////////////////////////////

for (let char of "Hello") {
  alert(char); // H,e,l,l,o (char ‚Äî —Å–Ω–∞—á–∞–ª–∞ "H", –ø–æ—Ç–æ–º "e", –ø–æ—Ç–æ–º "l" –∏ —Ç. –¥.)
}

//////////////////////////////////////////////////////////////////////

let str = 'Hi';

str[0] = 'h'; // –æ—à–∏–±–∫–∞
alert( str[0] ); // –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç

//////////////////////////////////////////////////////////////////////

let str = 'Hi';

str = 'h' + str[1]; // –∑–∞–º–µ–Ω—è–µ–º —Å—Ç—Ä–æ–∫—É

alert( str ); // hi

//////////////////////////////////////////////////////////////////////

alert( 'Interface'.toUpperCase() ); // INTERFACE
alert( 'Interface'.toLowerCase() ); // interface

//////////////////////////////////////////////////////////////////////

alert( 'Interface'[0].toLowerCase() ); // 'i'v

//////////////////////////////////////////////////////////////////////

let str = 'Widget with id';

alert( str.indexOf('Widget') ); // 0, –ø–æ—Ç–æ–º—É —á—Ç–æ –ø–æ–¥—Å—Ç—Ä–æ–∫–∞ 'Widget' –Ω–∞–π–¥–µ–Ω–∞ –≤ –Ω–∞—á–∞–ª–µ
alert( str.indexOf('widget') ); // -1, —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π –Ω–µ—Ç, –ø–æ–∏—Å–∫ —á—É–≤—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω –∫ —Ä–µ–≥–∏—Å—Ç—Ä—É

alert( str.indexOf("id") ); // 1, –ø–æ–¥—Å—Ç—Ä–æ–∫–∞ "id" –Ω–∞–π–¥–µ–Ω–∞ –Ω–∞ –ø–æ–∑–∏—Ü–∏–∏ 1 (..idget with id)

//////////////////////////////////////////////////////////////////////

let str = 'Widget with id';

alert( str.indexOf('id', 2) ) // 12

//////////////////////////////////////////////////////////////////////

let str = '–û—Å–ª–∏–∫ –ò–∞-–ò–∞ –ø–æ—Å–º–æ—Ç—Ä–µ–ª –Ω–∞ –≤–∏–∞–¥—É–∫';

let target = '–ò–∞'; // —Ü–µ–ª—å –ø–æ–∏—Å–∫–∞

let pos = 0;
while (true) {
  let foundPos = str.indexOf(target, pos);
  if (foundPos == -1) break;

  alert( `–ù–∞–π–¥–µ–Ω–æ —Ç—É—Ç: ${foundPos}` );
  pos = foundPos + 1; // –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º —Å–æ —Å–ª–µ–¥—É—é—â–µ–π –ø–æ–∑–∏—Ü–∏–∏
}

//////////////////////////////////////////////////////////////////////

let str = "–û—Å–ª–∏–∫ –ò–∞-–ò–∞ –ø–æ—Å–º–æ—Ç—Ä–µ–ª –Ω–∞ –≤–∏–∞–¥—É–∫";
let target = "–ò–∞";

let pos = -1;
while ((pos = str.indexOf(target, pos + 1)) != -1) {
  alert( pos );
}

//////////////////////////////////////////////////////////////////////

let str = "Widget with id";

if (str.indexOf("Widget")) {
    alert("–°–æ–≤–ø–∞–¥–µ–Ω–∏–µ –µ—Å—Ç—å"); // –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç
}

//////////////////////////////////////////////////////////////////////

let str = "Widget with id";

if (str.indexOf("Widget") != -1) {
    alert("–°–æ–≤–ø–∞–¥–µ–Ω–∏–µ –µ—Å—Ç—å"); // —Ç–µ–ø–µ—Ä—å —Ä–∞–±–æ—Ç–∞–µ—Ç
}

//////////////////////////////////////////////////////////////////////

alert( ~2 ); // -3, —Ç–æ –∂–µ, —á—Ç–æ -(2+1)
alert( ~1 ); // -2, —Ç–æ –∂–µ, —á—Ç–æ -(1+1)
alert( ~0 ); // -1, —Ç–æ –∂–µ, —á—Ç–æ -(0+1)
alert( ~-1 ); // 0, —Ç–æ –∂–µ, —á—Ç–æ -(-1+1)

//////////////////////////////////////////////////////////////////////

let str = "Widget";

if (~str.indexOf("Widget")) {
  alert( '–°–æ–≤–ø–∞–¥–µ–Ω–∏–µ –µ—Å—Ç—å' ); // —Ä–∞–±–æ—Ç–∞–µ—Ç
}

//////////////////////////////////////////////////////////////////////

alert( "Widget with id".includes("Widget") ); // true

alert( "Hello".includes("Bye") ); // false

//////////////////////////////////////////////////////////////////////

alert( "Midget".includes("id") ); // true
alert( "Midget".includes("id", 3) ); // false, –ø–æ–∏—Å–∫ –Ω–∞—á–∞—Ç —Å –ø–æ–∑–∏—Ü–∏–∏ 3

//////////////////////////////////////////////////////////////////////

alert( "Widget".startsWith("Wid") ); // true, "Wid" ‚Äî –Ω–∞—á–∞–ª–æ "Widget"
alert( "Widget".endsWith("get") ); // true, "get" ‚Äî –æ–∫–æ–Ω—á–∞–Ω–∏–µ "Widget"

//////////////////////////////////////////////////////////////////////

let str = "stringify";
// 'strin', —Å–∏–º–≤–æ–ª—ã –æ—Ç 0 –¥–æ 5 (–Ω–µ –≤–∫–ª—é—á–∞—è 5)
alert( str.slice(0, 5) );
// 's', –æ—Ç 0 –¥–æ 1, –Ω–µ –≤–∫–ª—é—á–∞—è 1, —Ç. –µ. —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Å–∏–º–≤–æ–ª –Ω–∞ –ø–æ–∑–∏—Ü–∏–∏ 0
alert( str.slice(0, 1) );

//////////////////////////////////////////////////////////////////////

let str = "stringify";
alert( str.slice(2) ); // ringify, —Å –ø–æ–∑–∏—Ü–∏–∏ 2 –∏ –¥–æ –∫–æ–Ω—Ü–∞

//////////////////////////////////////////////////////////////////////

let str = "stringify";

// –Ω–∞—á–∏–Ω–∞–µ–º —Å –ø–æ–∑–∏—Ü–∏–∏ 4 —Å–ø—Ä–∞–≤–∞, –∞ –∑–∞–∫–∞–Ω—á–∏–≤–∞–µ–º –Ω–∞ –ø–æ–∑–∏—Ü–∏–∏ 1 —Å–ø—Ä–∞–≤–∞
alert( str.slice(-4, -1) ); // gif

//////////////////////////////////////////////////////////////////////

let str = "stringify";

// –¥–ª—è substring —ç—Ç–∏ –¥–≤–∞ –ø—Ä–∏–º–µ—Ä–∞ ‚Äî –æ–¥–∏–Ω–∞–∫–æ–≤—ã
alert( str.substring(2, 6) ); // "ring"
alert( str.substring(6, 2) ); // "ring"

// ‚Ä¶–Ω–æ –Ω–µ –¥–ª—è slice:
alert( str.slice(2, 6) ); // "ring" (—Ç–æ –∂–µ —Å–∞–º–æ–µ)
alert( str.slice(6, 2) ); // "" (–ø—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞)

//////////////////////////////////////////////////////////////////////

let str = "stringify";
// ring, –ø–æ–ª—É—á–∞–µ–º 4 —Å–∏–º–≤–æ–ª–∞, –Ω–∞—á–∏–Ω–∞—è —Å –ø–æ–∑–∏—Ü–∏–∏ 2
alert( str.substr(2, 4) );

//////////////////////////////////////////////////////////////////////

let str = "stringify";
// gi, –ø–æ–ª—É—á–∞–µ–º 2 —Å–∏–º–≤–æ–ª–∞, –Ω–∞—á–∏–Ω–∞—è —Å –ø–æ–∑–∏—Ü–∏–∏ 4 —Å –∫–æ–Ω—Ü–∞ —Å—Ç—Ä–æ–∫–∏
alert( str.substr(-4, 2) );

//////////////////////////////////////////////////////////////////////

alert( 'a' > 'Z' ); // true

//////////////////////////////////////////////////////////////////////

alert( '√ñsterreich' > 'Zealand' ); // true

//////////////////////////////////////////////////////////////////////

// –æ–¥–Ω–∞ –∏ —Ç–∞ –∂–µ –±—É–∫–≤–∞ –≤ –Ω–∏–∂–Ω–µ–º –∏ –≤–µ—Ä—Ö–Ω–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–µ
// –±—É–¥–µ—Ç –∏–º–µ—Ç—å —Ä–∞–∑–Ω—ã–µ –∫–æ–¥—ã
alert( "z".codePointAt(0) ); // 122
alert( "Z".codePointAt(0) ); // 90

//////////////////////////////////////////////////////////////////////

alert( String.fromCodePoint(90) ); // Z

//////////////////////////////////////////////////////////////////////

// 90 ‚Äî 5a –≤ —à–µ—Å—Ç–Ω–∞–¥—Ü–∞—Ç–µ—Ä–∏—á–Ω–æ–π —Å–∏—Å—Ç–µ–º–µ —Å—á–∏—Å–ª–µ–Ω–∏—è
alert( '\u005a' ); // Z

//////////////////////////////////////////////////////////////////////

let str = '';

for (let i = 65; i <= 220; i++) {
  str += String.fromCodePoint(i);
}
alert( str );
// ABCDEFGHIJKLMNOPQRSTUVWXYZ[\]^_`abcdefghijklmnopqrstuvwxyz{|}~¬Ä¬Å¬Ç¬É¬Ñ
// ¬°¬¢¬£¬§¬•¬¶¬ß¬®¬©¬™¬´¬¨¬≠¬Æ¬Ø¬∞¬±¬≤¬≥¬¥¬µ¬∂¬∑¬∏¬π¬∫¬ª¬º¬Ω¬æ¬ø√Ä√Å√Ç√É√Ñ√Ö√Ü√á√à√â√ä√ã√å√ç√é√è√ê√ë√í√ì√î√ï√ñ√ó√ò√ô√ö√õ√ú

//////////////////////////////////////////////////////////////////////

alert( '√ñsterreich'.localeCompare('Zealand') ); // -1

//–ó–∞–¥–∞—á–∏

function ucFirst(word){
  if (!word) return word;
 

  return  word[0].toUpperCase() + word.slice(1);
  

}

alert(ucFirst("–≤–∞—Å—è") );
alert(ucFirst("–≤–∞—Å—è") == "–í–∞—Å—è");

//////////////////////////////////////////////////////////////////////

function checkSpam(str){
  if (!str) return false;
 
  str = str.toLowerCase();
  if (str.includes("viagra") == true || str.includes("xxx") == true){
    return true;
  }
  else{
    return false;
  }
  

}

alert( checkSpam('buy ViAgRA now') );
alert( checkSpam('free xxxxx') );
alert( checkSpam("innocent rabbit") );

//////////////////////////////////////////////////////////////////////

function truncate(str, maxlength){
  if (!str) return false;
  if (!maxlength) return false;
  

  if (str.length > maxlength){

    str = str.slice(0,(maxlength-1))+'‚Ä¶';

  };
  return str;
  
}


truncate("–í–æ—Ç, —á—Ç–æ –º–Ω–µ —Ö–æ—Ç–µ–ª–æ—Å—å –±—ã —Å–∫–∞–∑–∞—Ç—å –Ω–∞ —ç—Ç—É —Ç–µ–º—É:", 20) = "–í–æ—Ç, —á—Ç–æ –º–Ω–µ —Ö–æ—Ç–µ–ª–æ‚Ä¶"

truncate("–í—Å–µ–º –ø—Ä–∏–≤–µ—Ç!", 20) = "–í—Å–µ–º –ø—Ä–∏–≤–µ—Ç!"

//////////////////////////////////////////////////////////////////////

function extractCurrencyValue(str) {
  return +str.slice(1);
}

alert( extractCurrencyValue('$120') === 120 ); // true


